import threading
import time
import pickle
from pathlib import Path
import sqlite3
import cv2
import numpy as np
import os
from datetime import datetime
from filelock import FileLock
from openpyxl import Workbook, load_workbook
import face_recognition

BASE = Path(__file__).resolve().parent.parent
DB_PATH = BASE / 'data' / 'encodings_db.pkl'
ATTENDANCE_DIR = BASE / 'data' / 'attendance'
ATTENDANCE_LOG = ATTENDANCE_DIR / 'attendance_log.csv'
ATTENDANCE_XLSX = BASE / 'data' / 'attendance.xlsx'
ATTENDANCE_XLSX_LOCK = ATTENDANCE_XLSX.with_suffix('.xlsx.lock')
ATTENDANCE_DB = BASE / 'data' / 'attendance.db'


def load_db(path: Path):
    if not path.exists():
        return [], []
    with open(path, 'rb') as f:
        db = pickle.load(f)
    names = []
    encs = []
    for name, arr in db.items():
        for e in arr:
            names.append(name)
            encs.append(np.array(e))
    return names, encs


def is_present_value(v):
    if v is None:
        return False
    if isinstance(v, (int, float)):
        return int(v) != 0
    s = str(v).strip().lower()
    return s in ('1', 'p', 'present', 'y', 'yes', 'true')


def update_attendance_xlsx(names, timestamp, img_path):
    ATTENDANCE_DIR.mkdir(parents=True, exist_ok=True)
    lock = FileLock(str(ATTENDANCE_XLSX_LOCK))
    acquired = False
    try:
        lock.acquire(timeout=5)
        acquired = True
        if ATTENDANCE_XLSX.exists():
            wb = load_workbook(ATTENDANCE_XLSX)
        else:
            wb = Workbook()
            log = wb.active
            log.title = 'Log'
            log.append(['Timestamp', 'Names', 'ImagePath'])
            wb.create_sheet('Summary')

        if 'Log' not in wb.sheetnames:
            wb.create_sheet('Log')
        log = wb['Log']
        log.append([timestamp, ', '.join(names), img_path])

        if 'Summary' not in wb.sheetnames:
            wb.create_sheet('Summary')
        summ = wb['Summary']
        if summ.max_row == 0:
            summ.append(['Name', 'Date', 'Time'])
    
        try:
            dt = datetime.strptime(timestamp, '%Y%m%d_%H%M%S')
            date_str = dt.strftime('%Y-%m-%d')
            time_str = dt.strftime('%H:%M:%S')
        except Exception:
            date_str = datetime.now().strftime('%Y-%m-%d')
            time_str = datetime.now().strftime('%H:%M:%S')
        for n in names:
            summ.append([n, date_str, time_str])

        wb.save(ATTENDANCE_XLSX)
    finally:
        if acquired:
            try:
                lock.release()
            except Exception:
                pass


def save_attendance(frame, names):
    ATTENDANCE_DIR.mkdir(parents=True, exist_ok=True)
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    img_path = ATTENDANCE_DIR / f'attendance_{timestamp}.jpg'
    cv2.imwrite(str(img_path), frame)
 
    try:
        with open(ATTENDANCE_LOG, 'a', encoding='utf-8') as f:
            f.write(f"{timestamp},\"{', '.join(names)}\",{img_path}\n")
    except Exception:
        pass
